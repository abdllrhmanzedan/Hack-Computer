/*
ALU (Arithmetic Logic Unit):
Computes out = one of the following functions:
               0, 1, -1,
               x, y, !x, !y, -x, -y,
               x + 1, y + 1, x - 1, y - 1,
               x + y, x - y, y - x,
               x & y, x | y
on the 16-bit inputs x, y,
according to the input bits zx, nx, zy, ny, f, no.
In addition, computes the two output bits:
if (out == 0) zr = 1, else zr = 0
if (out < 0)  ng = 1, else ng = 0
*/

// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // # zx and nx:
    // if (zx == 0) sets outx1 = x, else outx1 = 0000000000000000
    Mux16(a=x, b=false, sel=zx, out=outx1);

    // if (nx == 0) sets outx2 = outx1 (remains the same), else outx2 = notx
    Not16(in=outx1, out=notx);
    Mux16(a=outx1, b=notx, sel=nx, out=outx2);
    // -------------------------------------------------------------------------

    // # zy and ny:
    // if (zy == 0) sets outy1 = y, else outy1 = 0000000000000000
    Mux16(a=y, b=false, sel=zy, out=outy1);

    // if (ny == 0) sets outy2 = outy1 (remains the same), else outy2 = noty
    Not16(in=outy1, out=noty);
    Mux16(a=outy1, b=noty, sel=ny, out=outy2);
    // -------------------------------------------------------------------------

    // # f:
    And16(a=outx2, b=outy2, out=xyand);
    Add16(a=outx2, b=outy2, out=xyadd);

    // if (f == 0) sets tempout = outx2 & outy2, else tempout = outx2 + outy2
    Mux16(a=xyand, b=xyadd, sel=f, out=tempout);
    // -------------------------------------------------------------------------
    
    // # no:
    Not16(in=tempout, out=nottempout);

    // if (no == 0) sets out = temoout , else out = nottempout
    // slicing first and second 8-bits and the msb
    Mux16(a=tempout, b=nottempout, sel=no, out=out, out[0..7]=p1, out[8..15]=p2, out[15]=msb);
    // -------------------------------------------------------------------------

    // # zr    

    // Oring the out 16-Way by slicing it, there must be no single 1 in out in order to zr=1
    Or8Way(in=p1, out=orout1);
    Or8Way(in=p2, out=orout2);
    Or(a=orout1, b=orout2, out=orout3);

    // if (orout3 == 0) set zr = 1, else zr = 0
    Mux(a=true, b=false, sel=orout3, out=zr);
    // -------------------------------------------------------------------------    

    // # ng
    Or(a=false, b=msb, out=ng);
}