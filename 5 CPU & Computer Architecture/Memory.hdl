/*
The complete address space of the Hack computer's memory,
including RAM and memory-mapped I/O. 
The chip facilitates read and write operations, as follows:
    Read:  out(t) = Memory[address(t)](t)
    Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
In words: the chip always outputs the value stored at the memory 
location specified by address. If load=1, the in value is loaded 
into the memory location specified by address. This value becomes 
available through the out output from the next time step onward.
Address space rules:
Only the upper 16K+8K+1 words of the Memory chip are used. 
Access to address>0x6000 is invalid and reads 0. Access to any address
in the range 0x4000-0x5FFF results in accessing the screen memory 
map. Access to address 0x6000 results in accessing the keyboard 
memory map. The behavior in these addresses is described in the Screen
and Keyboard chip specifications given in the lectures and the book.

RAM:      [0:2^14 - 1]
Screen:   [2^14 : 24575]
Keyboard: [24576:24576]
*/
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /*
        if (bit[14] == 0)
            address < 16384 (still in RAM)
            out=RAMout
        else
            if (bit[13] == 0)
                Screen
                out=ScreenOut
            else
                Keyboard or invalid
    */
    DMux(in=load, sel=address[14], a=RAMLoad, b=ScreenTemp);
    Not(in=address[13], out=notKBD);
    And(a=ScreenTemp, b=notKBD, out=ScreenLoad);
    
    RAM16K(in=in, load=RAMLoad, address=address[0..13], out=RAMout);  
    Screen(in=in, load=ScreenLoad, address=address[0..12], out=ScreenOut);

    Mux16(a=RAMout, b=ScreenOut, sel=address[14], out=out1);

    /*
        if (bit[14] & bit[13])
            Keyboard or invalid
        else
            RAM or Screen
    */
    Keyboard(out=KBDout);
    And(a=address[14], b=address[13], out=isKBD);
    Mux16(a=out1, b=KBDout, sel=isKBD, out=out2);

    /*
        MAX = 2^14 + 2^13 (RAM_Size + Screen_Size)
        if (address > MAX)
            out=0
        else
            out=out2
    */
    ALU(x[14]=true, x[13]=true, y[0..14]=address, zx=false, nx=true,
    zy=false, ny=false, f=true, no=true, out=temp, zr=zero, ng=neg);
    
    Mux16(a=out2, b=false, sel=neg, out=out);
}