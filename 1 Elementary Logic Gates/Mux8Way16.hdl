/*
8-way 16-bit multiplexor:
Just extention for the 4-way
dividing the truth table into sizes of 2, then build the answer for bigger sizes (D&C)
out = a if sel = 000
      b if sel = 001
      c if sel = 010
      d if sel = 011
      e if sel = 100
      f if sel = 101
      g if sel = 110
      h if sel = 111
*/
CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    // First layer: Select between adjacent pairs of inputs based on sel[0].
    // The result is four intermediate 16-bit results: b1, b2, b3, b4.
    Mux16(a=a, b=b, sel=sel[0], out=b1);
    Mux16(a=c, b=d, sel=sel[0], out=b2);
    Mux16(a=e, b=f, sel=sel[0], out=b3);
    Mux16(a=g, b=h, sel=sel[0], out=b4);

    // Second layer: Select between the two results from the previous layer using sel[1].
    // The result is two intermediate 16-bit values: bb1 and bb2.
    Mux16(a=b1, b=b2, sel=sel[1], out=bb1);
    Mux16(a=b3, b=b4, sel=sel[1], out=bb2);
    
    // Final layer: Select the final output based on sel[2] (either bb1 or bb2).
    Mux16(a=bb1, b=bb2, sel=sel[2], out=out);
}